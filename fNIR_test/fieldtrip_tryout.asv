clear

%% https://www.fieldtriptoolbox.org/faq/should_i_add_fieldtrip_with_all_subdirectories_to_my_matlab_path/
% addpath C:\Users\zhibi\Downloads\fieldtrip-lite-20220304\fieldtrip-20220304 %not working
% ft_defaults
% fieldtripdefs.m

restoredefaultpath
addpath C:\Users\zhibi\Downloads\fieldtrip-20201229\fieldtrip-20201229
ft_defaults

restoredefaultpath
addpath C:\Users\zhibi\Downloads\fieldtrip-20220304\fieldtrip-20220304 % this version is better
ft_defaults
%%  https://www.fieldtriptoolbox.org/tutorial/nirs_singlechannel/
help ft_preprocessing
edit ft_preprocessing

cfg = [];
cd C:\Users\zhibi\Downloads\nirs_singlechannel\
cfg.dataset = 'motor_cortex.oxy3';

[data]=ft_preprocessing(cfg);

cfg = [];
cfg.ylim = 'maxabs';
ft_databrowser(cfg, data);

cfg = [];
cfg.ylim = 'maxmin';
% cfg.channel = {'Rx4b-Tx5 [860nm]', 'Rx4b-Tx5 [764nm]'};  % you can also use wildcards like 'Rx4b-Tx5*'
cfg.channel = {'Rx4b-Tx5*'}; 
ft_databrowser(cfg, data);

% Exercise 1
cfg = [];
cfg.artfctdef.zvalue.channel = {'Rx4b-Tx5 [860nm]', 'Rx4b-Tx5 [764nm]'};
cfg.artfctdef.zvalue.cutoff = 5;
cfg.artfctdef.zvalue.hpfilter = 'yes';
cfg.artfctdef.zvalue.hpfreq = 0.1;
cfg.artfctdef.zvalue.rectify = 'yes';
cfg.artfctdef.zvalue.artpadding = 2;
% cfg.artfctdef.zvalue.interactive = 'yes'; % the interactive display makes more sense after segmentating data in trials
[cfg, artifact] = ft_artifact_zvalue(cfg, data);

% Exercise 2
cfg = [];
cfg.dpf = 5.9;
cfg.channel = {'Rx4b-Tx5 [860nm]', 'Rx4b-Tx5 [764nm]'};
data_conc = ft_nirs_transform_ODs(cfg, data);

% Exercise 3
cfg = [];
cfg.ylim = 'maxmin';
% cfg.channel = {'Rx4b-Tx5 [860nm]', 'Rx4b-Tx5 [764nm]'};  % you can also use wildcards like 'Rx4b-Tx5*'
cfg.channel = {'Rx4b-Tx5*'}; 
ft_databrowser(cfg, data_conc);

cfg = [];
cfg.bpfilter = 'yes';
cfg.bpfreq = [0.01 0.1];
data_filtered = ft_preprocessing(cfg, data_conc);

% Define epochs of interest
help ft_definetrial

cfg = [];
cfg.dataset = 'motor_cortex.oxy3';
cfg.trialdef.eventtype = '?';

ft_definetrial(cfg);

cfg.trialdef.eventtype  = 'event';
cfg.trialdef.eventvalue = 'A';
cfg.trialdef.prestim    = 10;
cfg.trialdef.poststim   = 35;

cfg = ft_definetrial(cfg);

cfg.channel = {'Rx4b-Tx5 [860nm]', 'Rx4b-Tx5 [764nm]'};
data_epoch = ft_redefinetrial(cfg, data_filtered);

cfg = [];
cfg.ylim = [-1 1];
cfg.viewmode = 'vertical';
cfg.artfctdef.zvalue.artifact = artifact;

ft_databrowser(cfg, data_epoch); % inconsistent number of samples in trial 1 ?

cfg = [];
cfg.artfctdef.zvalue.artifact = artifact;
cfg.artfctdef.reject = 'complete';
data_epoch = ft_rejectartifact(cfg, data_epoch);

% Exercise 4

% Exercise 5
cfg = [];
data_timelock = ft_timelockanalysis(cfg, data_epoch);

time = data_timelock.time;
O2Hb = data_timelock.avg(1,:);
HHb  = data_timelock.avg(2,:);
figure;
plot(time,O2Hb,'r'); hold on;
plot(time,HHb,'b');
legend('O2Hb','HHb'); ylabel('\DeltaHb (\muM)'); xlabel('time (s)');

%% https://www.fieldtriptoolbox.org/tutorial/nirs_multichannel/
clear
cd C:\Users\zhibi\Downloads\nirs_multichannel
cfg             = [];
cfg.dataset     = 'LR-01-2015-06-01-0002.oxy3';
data_raw        = ft_preprocessing(cfg);

cfg           = [];
cfg.opto      = 'LR-01-2015-06-01-0002.oxy3';
ft_layoutplot(cfg);

find(strcmp(data_raw.label,'ADC001'))
find(strcmp(data_raw.label,'ADC002'))

figure; hold on
% plot the voltage of ADC001 and ADC002
% increase the scale of ADC002 a little bit to make it more clear in the figure
plot(data_raw.time{1}, data_raw.trial{1}(97,:)*1.0, 'b-')
plot(data_raw.time{1}, data_raw.trial{1}(98,:)*1.1, 'r:')

% Exercise 1
event = ft_read_event('LR-01-2015-06-01-0002.oxy3')

% Exercise 2
data_raw.fsample

cfg                   = [];
cfg.resamplefs        = 10;
data_down             = ft_resampledata(cfg, data_raw);

cfg                = [];
cfg.preproc.demean = 'yes';
cfg.viewmode       = 'vertical';
cfg.continuous     = 'no';
cfg.ylim           = [ -0.003   0.003 ];
cfg.channel        = 'Rx*'; % only show channels starting with Rx
ft_databrowser(cfg, data_down);

cfg                 = [];
cfg.hpfilter        = 'yes';
cfg.hpfreq          = 0.01;
data_flt            = ft_preprocessing(cfg,data_down);

cfg                = [];
cfg.preproc.demean = 'yes';
cfg.viewmode       = 'vertical';
cfg.continuous     = 'no';
cfg.ylim           = [ -0.003   0.003 ];
cfg.channel        = 'Rx*'; % only show channels starting with Rx
ft_databrowser(cfg, data_flt);

event = ft_read_event('LR-01-2015-06-01-0002.oxy3');

adc001 = find(strcmp({event.type}, 'ADC001'));
adc002 = find(strcmp({event.type}, 'ADC002'));

% get the sample number in the original data
% note that we transpose them to get columns
smp001 = [event(adc001).sample]';
smp002 = [event(adc002).sample]';

factor = data_raw.fsample / data_down.fsample

% get the sample number after downsampling
smp001 = round((smp001-1)/factor + 1);
smp002 = round((smp002-1)/factor + 1);

pre    =  round( 5*data_down.fsample);
post   =  round(20*data_down.fsample);
offset = -pre; % see ft_definetrial

trl001 = [smp001-pre smp001+post];
trl002 = [smp002-pre smp002+post];

% add the offset
trl001(:,3) = offset;
trl002(:,3) = offset;

trl001(:,4) = 1; % add a column with the condition number
trl002(:,4) = 2; % add a column with the condition number

% concatenate the two conditions and sort them
trl = sortrows([trl001; trl002])

% remove trials that stretch beyond the end of the recording
sel = trl(:,2)<size(data_down.trial{1},2);
trl = trl(sel,:);

cfg     = [];
cfg.trl = trl;
data_epoch = ft_redefinetrial(cfg,data_down);

idx = find(data_epoch.trialinfo==2, 1, 'first') % the first deviant:

cfg          = [];
cfg.channel  = 'Rx*';
cfg.trials   = 8;
cfg.baseline = 'yes';
ft_singleplotER(cfg, data_epoch)

% Exercise 3
cfg      = [];
data_sci = ft_nirs_scalpcouplingindex(cfg, data_epoch);

% Exercise 4
cfg                 = [];
cfg.target          = {'O2Hb', 'HHb'};
cfg.channel         = 'nirs'; % e.g., one channel incl. wildcards, you can also use ?all? to select all NIRS channels
data_conc           = ft_nirs_transform_ODs(cfg, data_sci);

cfg          = [];
cfg.channel  = 'Rx*';
cfg.trials   = 8;
cfg.baseline = 'yes';
ft_singleplotER(cfg, data_conc)

cfg                   = [];
cfg.lpfilter          = 'yes';
cfg.lpfreq            = 0.8;
data_lpf              = ft_preprocessing(cfg, data_conc);

cfg          = [];
cfg.channel  = 'Rx*';
cfg.trials   = 8;
cfg.baseline = 'yes';
ft_singleplotER(cfg, data_conc)

%% my data
cfg = [];
cd C:\Users\zhibi\Desktop\Artinis_NIRS\zhibin
cfg.dataset = '20211020oxy3.oxy3';
[data]=ft_preprocessing(cfg);
